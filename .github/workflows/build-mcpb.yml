name: Build n8n-dev-bridge MCPB Bundle

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-mcpb:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install MCPB CLI
      run: npm install -g @anthropic-ai/mcpb

    - name: Create bundle directory structure
      shell: powershell
      run: |
        New-Item -ItemType Directory -Force -Path "bundle"
        New-Item -ItemType Directory -Force -Path "bundle/server"
        Write-Host "Bundle directory structure created"

    - name: Generate manifest.json
      shell: powershell
      run: |
        $manifest = @{
          mcpb_version = "0.1"
          name = "n8n-dev-bridge"
          version = "${{ github.ref_name != '' && github.ref_name || '1.0.0-dev' }}"
          description = "n8n Development Bridge - Remote MCP server via Railway with HTTP transport and Bearer token authentication"
          author = @{
            name = "Kurt Anderson"
            url = "https://github.com/${{ github.repository }}"
          }
          license = "MIT"
          homepage = "https://github.com/${{ github.repository }}"
          repository = "https://github.com/${{ github.repository }}"
          keywords = @("n8n", "mcp-remote", "railway", "workflow-automation", "http-transport")
          server = @{
            type = "node"
            entry_point = "server/index.js"
            mcp_config = @{
              command = "npx"
              args = @(
                "-y",
                "mcp-remote@latest", 
                "https://czlonkowskin8n-mcp-railwaylatest-dev.up.railway.app/mcp",
                "--transport", "http-only",
                "--header", "Authorization:`${AUTH_HEADER_DEV}"
              )
              env = @{}
            }
          }
          capabilities = @{
            tools = @(
              @{
                name = "list_nodes"
                description = "List available n8n nodes with filtering options"
              },
              @{
                name = "search_nodes"
                description = "Search n8n nodes by keyword"
              },
              @{
                name = "get_node_info"
                description = "Get detailed information about specific n8n nodes"
              },
              @{
                name = "get_node_documentation"
                description = "Get readable documentation with examples for n8n nodes"
              },
              @{
                name = "validate_node_operation"
                description = "Validate n8n node configurations"
              },
              @{
                name = "n8n_create_workflow"
                description = "Create new n8n workflows"
              },
              @{
                name = "n8n_list_workflows"
                description = "List all workflows with filtering"
              },
              @{
                name = "n8n_get_workflow"
                description = "Retrieve existing workflows by ID"
              },
              @{
                name = "n8n_update_full_workflow"
                description = "Update complete workflows"
              },
              @{
                name = "n8n_validate_workflow"
                description = "Validate workflow structure and configuration"
              },
              @{
                name = "search_templates"
                description = "Search community workflow templates"
              },
              @{
                name = "get_template"
                description = "Get complete workflow template by ID"
              },
              @{
                name = "n8n_health_check"
                description = "Check n8n instance connectivity and status"
              }
            )
            resources = @(
              @{
                name = "n8n://workflows"
                description = "Access to n8n workflows via Railway HTTP API"
              },
              @{
                name = "n8n://nodes"
                description = "Access to n8n node library and documentation"
              },
              @{
                name = "n8n://templates"
                description = "Access to community workflow templates"
              }
            )
          }
          configuration = @{
            required = true
            properties = @{
              auth_header_dev = @{
                type = "string"
                description = "Bearer token for n8n Railway API authentication"
                sensitive = $true
                required = $true
                default = ""
              }
            }
          }
          authentication = @{
            type = "bearer_token"
            description = "Bearer token authentication for Railway-hosted n8n instance"
            storage = "os_keychain"
          }
          permissions = @{
            network = @{
              allowed_hosts = @(
                "czlonkowskin8n-mcp-railwaylatest-dev.up.railway.app",
                "*.railway.app",
                "*.up.railway.app"
              )
            }
          }
          metadata = @{
            category = "development"
            tags = @("n8n", "railway", "mcp-remote", "http-transport", "bearer-auth")
            compatibility = @{
              claude_desktop = ">=0.11.0"
              node = ">=18.0.0"
            }
            transport = @{
              protocol = "http"
              authentication = "bearer"
              endpoint = "https://czlonkowskin8n-mcp-railwaylatest-dev.up.railway.app/mcp"
            }
          }
        }
        
        $manifest | ConvertTo-Json -Depth 10 | Out-File -FilePath "bundle/manifest.json" -Encoding UTF8
        Write-Host "Generated manifest.json"

    - name: Generate package.json
      shell: powershell
      run: |
        $package = @{
          name = "n8n-dev-bridge-mcpb"
          version = "${{ github.ref_name != '' && github.ref_name || '1.0.0-dev' }}"
          description = "n8n Development Bridge MCPB Bundle - Railway HTTP transport"
          main = "server/index.js"
          type = "module"
          scripts = @{
            start = "node server/index.js"
          }
          dependencies = @{
            "mcp-remote" = "^1.0.0"
          }
          engines = @{
            node = ">=18.0.0"
          }
          keywords = @("n8n", "mcp", "mcpb", "railway", "http-transport")
          author = "Kurt Anderson"
          license = "MIT"
        }
        
        $package | ConvertTo-Json -Depth 5 | Out-File -FilePath "bundle/package.json" -Encoding UTF8
        Write-Host "Generated package.json"

    - name: Generate server implementation
      shell: powershell
      run: |
        $serverCode = @'
#!/usr/bin/env node

/**
 * n8n Development Bridge MCPB Server
 * 
 * Proxies to Railway-hosted n8n MCP server via mcp-remote
 * with HTTP transport and Bearer token authentication.
 */

import { spawn } from 'child_process';
import { createWriteStream } from 'fs';

class N8nDevBridgeMCPB {
  constructor() {
    this.remoteProcess = null;
    this.isRunning = false;
    
    // Get auth token from environment or Windows Credential Manager
    this.authToken = this.getAuthToken();
  }

  getAuthToken() {
    // First check environment variable
    if (process.env.AUTH_HEADER_DEV) {
      return process.env.AUTH_HEADER_DEV;
    }
    
    // In a real implementation, you would read from Windows Credential Manager
    // For MCPB bundles, this is handled by Claude Desktop's secure storage
    return process.env.AUTH_HEADER_DEV || 'Bearer ${AUTH_HEADER_DEV}';
  }

  async start() {
    try {
      // Start mcp-remote with HTTP transport to Railway
      const args = [
        '-y',
        'mcp-remote@latest',
        'https://czlonkowskin8n-mcp-railwaylatest-dev.up.railway.app/mcp',
        '--transport', 'http-only',
        '--header', `Authorization:${this.authToken}`
      ];

      this.remoteProcess = spawn('npx', args, {
        stdio: ['pipe', 'pipe', 'inherit'],
        env: {
          ...process.env,
          AUTH_HEADER_DEV: this.authToken
        }
      });

      // Set up bidirectional communication
      process.stdin.pipe(this.remoteProcess.stdin);
      this.remoteProcess.stdout.pipe(process.stdout);

      this.isRunning = true;

      // Handle process lifecycle
      this.remoteProcess.on('exit', (code) => {
        this.isRunning = false;
        if (code !== 0) {
          console.error(`n8n-dev-bridge remote process exited with code ${code}`);
          process.exit(code);
        }
      });

      this.remoteProcess.on('error', (error) => {
        console.error('Failed to start n8n-dev-bridge remote process:', error.message);
        process.exit(1);
      });

      // Graceful shutdown
      process.on('SIGTERM', this.shutdown.bind(this));
      process.on('SIGINT', this.shutdown.bind(this));
      
    } catch (error) {
      console.error('Error starting n8n-dev-bridge server:', error.message);
      process.exit(1);
    }
  }

  async shutdown() {
    if (this.remoteProcess && this.isRunning) {
      this.remoteProcess.kill('SIGTERM');
    }
    process.exit(0);
  }
}

// Start the server
const server = new N8nDevBridgeMCPB();
server.start().catch((error) => {
  console.error('Failed to start n8n-dev-bridge MCPB server:', error.message);
  process.exit(1);
});
'@
        
        $serverCode | Out-File -FilePath "bundle/server/index.js" -Encoding UTF8
        Write-Host "Generated server/index.js"

    - name: Install bundle dependencies
      working-directory: ./bundle
      run: npm install

    - name: Validate bundle structure
      working-directory: ./bundle
      shell: powershell
      run: |
        # Check required files exist
        $requiredFiles = @("manifest.json", "package.json", "server/index.js")
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            throw "Required file missing: $file"
          }
        }
        
        # Validate JSON files
        try {
          Get-Content "manifest.json" | ConvertFrom-Json | Out-Null
          Get-Content "package.json" | ConvertFrom-Json | Out-Null
          Write-Host "Bundle structure validation passed"
        } catch {
          throw "JSON validation failed: $($_.Exception.Message)"
        }

    - name: Build MCPB bundle
      working-directory: ./bundle
      shell: powershell
      run: |
        # Build the MCPB bundle
        mcpb pack
        
        # Verify the bundle was created
        if (Test-Path "n8n-dev-bridge.mcpb") {
          $bundleSize = (Get-Item "n8n-dev-bridge.mcpb").Length
          Write-Host "Successfully created n8n-dev-bridge.mcpb (Size: $bundleSize bytes)"
          
          # List bundle contents for verification
          Write-Host "Bundle contents:"
          mcpb inspect n8n-dev-bridge.mcpb 2>$null || Write-Host "Bundle created successfully"
        } else {
          throw "Failed to create MCPB bundle"
        }

    - name: Upload MCPB bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: n8n-dev-bridge-mcpb-${{ github.run_number }}
        path: bundle/n8n-dev-bridge.mcpb
        retention-days: 30

    - name: Create Windows Credential Manager script
      shell: powershell
      run: |
        $credScript = @'
# Windows Credential Manager Setup Script
# Run this script as Administrator to store the auth token securely

param(
    [Parameter(Mandatory=$true)]
    [string]$AuthToken
)

$targetName = "n8n-dev-bridge-auth"
$userName = "AUTH_HEADER_DEV"

try {
    # Remove existing credential if it exists
    cmdkey /delete:$targetName 2>$null
    
    # Add new credential
    echo $AuthToken | cmdkey /generic:$targetName /user:$userName /pass
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "Successfully stored auth token in Windows Credential Manager"
        Write-Host "Target: $targetName"
        Write-Host "Username: $userName"
        Write-Host ""
        Write-Host "The token is now securely stored and will be used by the MCPB bundle."
        Write-Host "Your original token: Bearer zxT94kE8pLr62UNqV1dCB"
    } else {
        Write-Error "Failed to store credential in Windows Credential Manager"
    }
} catch {
    Write-Error "Error: $($_.Exception.Message)"
}
'@
        
        $credScript | Out-File -FilePath "setup-windows-credentials.ps1" -Encoding UTF8
        Write-Host "Created Windows Credential Manager setup script"

    - name: Upload credential setup script
      uses: actions/upload-artifact@v4
      with:
        name: windows-credential-setup-${{ github.run_number }}
        path: setup-windows-credentials.ps1
        retention-days: 30

    - name: Generate installation instructions
      shell: powershell
      run: |
        $instructions = @"
# n8n-dev-bridge MCPB Bundle Installation

## Files in this release:
- ``n8n-dev-bridge.mcpb`` - Ready-to-install Claude Desktop extension
- ``setup-windows-credentials.ps1`` - Script to store auth token securely

## Installation Steps:

### 1. Set up Windows Credential Manager (REQUIRED)
Run PowerShell as Administrator and execute:
``````powershell
.\setup-windows-credentials.ps1 -AuthToken "Bearer zxT94kE8pLr62UNqV1dCB"
``````

### 2. Install MCPB Bundle in Claude Desktop
1. Download the ``n8n-dev-bridge.mcpb`` file
2. Open Claude Desktop
3. Go to Settings → Extensions
4. Drag the ``.mcpb`` file into the "Drag .MCPB or .DXT files here" area
5. Follow installation prompts

### 3. Remove old JSON configuration
Edit your Claude Desktop config file:
``````json
{
  "mcpServers": {
    // Remove the entire n8n-dev-bridge section
  }
}
``````

### 4. Test the installation
In Claude Desktop, try:
- "Check n8n health status"
- "List my n8n workflows" 
- "Show available n8n nodes"

## Configuration Details:
- **Transport**: HTTP-only via mcp-remote
- **Authentication**: Bearer token via Windows Credential Manager
- **Endpoint**: https://czlonkowskin8n-mcp-railwaylatest-dev.up.railway.app/mcp
- **Security**: Tokens stored in OS keychain (Windows Credential Manager)

Built from commit: ${{ github.sha }}
Build number: ${{ github.run_number }}
"@
        
        $instructions | Out-File -FilePath "INSTALLATION.md" -Encoding UTF8

    - name: Upload installation instructions
      uses: actions/upload-artifact@v4
      with:
        name: installation-instructions-${{ github.run_number }}
        path: INSTALLATION.md
        retention-days: 30

    - name: Create release on tag push
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          bundle/n8n-dev-bridge.mcpb
          setup-windows-credentials.ps1
          INSTALLATION.md
        name: n8n-dev-bridge MCPB Bundle ${{ github.ref_name }}
        body: |
          Automated build of n8n-dev-bridge MCPB bundle for Claude Desktop.
          
          **Ready for drag-and-drop installation!**
          
          See INSTALLATION.md for complete setup instructions including Windows Credential Manager configuration.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
